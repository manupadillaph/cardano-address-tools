{"version":3,"file":"convertAddressToPkh.js","sourceRoot":"","sources":["../src/convertAddressToPkh.ts"],"names":[],"mappings":";;;;;;AAAA,gHAAyD;AAEzD,SAAgB,mBAAmB,CAAC,OAAe,EAAE,GAAW,EAAE,QAAiB;IAC/E,oDAAoD;IACpD,MAAM,OAAO,GAAG,0CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC/C,IAAI,YAAY,CAAC;IACjB,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,EAAE,EAAE,CAAC;QAC5C,YAAY,GAAG,0CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAC;SAAM,CAAC;QACJ,YAAY,GAAG,SAAS,CAAC;IAC7B,CAAC;IACD,MAAM,MAAM,GAAG,uBAAuB,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IACvE,OAAO,MAAM,CAAC;AAClB,CAAC;AAXD,kDAWC;AAED,SAAgB,uBAAuB,CAAC,OAAe,EAAE,OAAyB,EAAE,YAA+B;IAC/G,IAAI,OAAO,CAAC;IAEZ,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;QAC7B,OAAO,GAAG,0CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,0CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,0CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;IAChI,CAAC;SAAM,CAAC;QACJ,OAAO,GAAG,0CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,0CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;IACxF,CAAC;IAED,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IAEzD,OAAO,MAAM,CAAC;AAClB,CAAC;AAZD,0DAYC;AAGD,KAAK,UAAU,GAAG;IAEd,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,gCAAgC;IACpE,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACtC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,0CAA0C;IAEpE,MAAM,OAAO,GAAG,mBAAmB,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC5D,gKAAgK;IAChK,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACzB,CAAC;AAED,GAAG,EAAE,CAAC","sourcesContent":["import C from '@emurgo/cardano-serialization-lib-nodejs';\n\nexport function pubKeyHashToAddress(network: number, pkh: string, stakePkh?: string) {\n    // console.log('pubKeyHashToAddress - pkh: ' + pkh);\n    const keyHash = C.Ed25519KeyHash.from_hex(pkh);\n    let stekeKeyHash;\n    if (stakePkh !== undefined && stakePkh !== '') {\n        stekeKeyHash = C.Ed25519KeyHash.from_hex(stakePkh);\n    } else {\n        stekeKeyHash = undefined;\n    }\n    const bech32 = Ed25519KeyHashToAddress(network, keyHash, stekeKeyHash);\n    return bech32;\n}\n\nexport function Ed25519KeyHashToAddress(network: number, keyHash: C.Ed25519KeyHash, stakeKeyHash?: C.Ed25519KeyHash) {\n    let address;\n\n    if (stakeKeyHash !== undefined) {\n        address = C.BaseAddress.new(network, C.StakeCredential.from_keyhash(keyHash), C.StakeCredential.from_keyhash(stakeKeyHash));\n    } else {\n        address = C.EnterpriseAddress.new(network, C.StakeCredential.from_keyhash(keyHash));\n    }\n\n    const bech32 = address.to_address().to_bech32(undefined);\n\n    return bech32;\n}\n\n\nasync function run() {\n\n    const args = process.argv.slice(2); // Remove the first two elements\n    const network = parseInt(args[0], 10);\n    const pkh = args[1];\n    const stakePkh = args[2]; // This could be undefined if not provided\n\n    const address = pubKeyHashToAddress(network, pkh, stakePkh);\n    // const address = pubKeyHashToAddress (0,'4a7f481cf94777e442f3c6d5be7206f11d6041302a9d9ebff9aded4f','b70c1852f881584693c30c29d5850b7d4b759620efeb1ffaa0e737b9')\n    console.log(address);\n}\n\nrun();\n"]}